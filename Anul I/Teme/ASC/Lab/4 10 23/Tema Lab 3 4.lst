     1                                  ; înmulțiri, împărțiri
     2                                  ; a - word, b - byte, c - word, d - doubleword, x - qword | interpretare cu semn
     3                                  ; 26. (a * a + b / c - 1) / (b + c) + d - x
     4                                  
     5                                  bits 32
     6                                  global start
     7                                  extern exit
     8                                  import exit msvcrt.dll
     9                                  segment data use32 class=data
    10                                  
    11 00000000 0C00                        a dw 12
    12 00000002 03                          b db 3
    13 00000003 FFFF                        c dw -1
    14 00000005 9CFFFFFF                    d dd -100
    15 00000009 E4FFFFFFFFFFFFFF            x dq -28
    16 00000011 0000                        rest1 dw 0; variabilă pentru păstrat restul lui b / c
    17 00000013 00000000                    rest2 dd 0; variabilă pentru păstrat restul lui (a * a + b / c - 1) / (b + c)
    18                                  
    19                                  segment code use32 class=code
    20                                      start:
    21                                  
    22                                      ; a * a
    23                                      
    24 00000000 B800000000                  mov eax, 0
    25 00000005 66A1[00000000]              mov ax, [a]; AX = a = 12
    26 0000000B 6689C3                      mov bx, ax; BX = AX = 12
    27 0000000E 66F7EB                      imul bx; DX:AX = AX * BX = 12 * 12 = 144
    28 00000011 6652                        push dx
    29 00000013 6650                        push ax
    30 00000015 58                          pop eax
    31 00000016 98                          cwde; EAX = AX = 144
    32 00000017 89C3                        mov ebx, eax; EBX = EAX = 144
    33                                  
    34                                      ; b / c
    35                                      
    36 00000019 B800000000                  mov eax, 0
    37 0000001E A0[02000000]                mov al, [b]; AL = b = 3
    38 00000023 6698                        cbw; AX = AL = 3
    39 00000025 98                          cwde; EAX = AX = 3
    40 00000026 B900000000                  mov ecx, 0
    41 0000002B 50                          push eax; îl punem pe EAX curent pe stivă
    42 0000002C 66A1[03000000]              mov ax, [c]; îl punem pe c pe ECX prin AX
    43 00000032 98                          cwde; ^
    44 00000033 89C1                        mov ecx, eax; ^
    45 00000035 58                          pop eax; îl restituim pe EAX
    46 00000036 99                          cdq; EDX:EAX = EAX pentru diviziune corectă cu semn
    47                                      
    48 00000037 F7F9                        idiv ecx; EDX:EAX = EAX / ECX = 3 / -1 = -3
    49 00000039 668915[11000000]            mov [rest1], dx
    50                                  
    51                                      ; a * a + b / c - 1
    52                                      
    53 00000040 01D8                        add eax, ebx; EAX = EAX + EBX = -3 + 144 = 141
    54 00000042 83E801                      sub eax, 1; EAX = EAX - 1 = 141 - 1 = 140
    55 00000045 89C3                        mov ebx, eax; EBX = EAX = 140
    56                                  
    57                                      ; b + c
    58 00000047 B800000000                  mov eax, 0
    59 0000004C A0[02000000]                mov al, [b]; AL = b = 3
    60 00000051 6698                        cbw; AX = AL = 3
    61 00000053 98                          cwde; EAX = AX = 3
    62 00000054 660305[03000000]            add ax, [c]; AX = AX + c = 3 + (-1) = 2
    63                                  
    64                                      ; (a * a + b / c - 1) / (b + c)
    65                                      
    66 0000005B 89C1                        mov ecx, eax; ECX = EAX = 2
    67 0000005D 89D8                        mov eax, ebx; EAX = EBX = 140
    68                                      
    69 0000005F BA00000000                  mov edx, 0
    70 00000064 F7F9                        idiv ecx; EAX = EAX / EBX = 140/2 = 70
    71 00000066 8915[13000000]              mov [rest2], edx
    72                                  
    73                                      ; (a * a + b / c - 1) / (b + c) + d - x
    74                                      
    75 0000006C 8B1D[09000000]              mov ebx, [x]
    76 00000072 8B0D[0D000000]              mov ecx, [x + 4]
    77                                      
    78 00000078 0305[05000000]              add eax, dword [d]; EAX = EAX + d = 70 + (-100) = -30
    79 0000007E 99                          cdq; EDX = FFFF FFFF
    80 0000007F 29D8                        sub eax, ebx; EAX = EAX - EBX = -30 - (-28) = -30 + 28 = -2 = FFFF FFFE
    81 00000081 19D1                        sbb ecx, edx; ECX = FFFF FFFF
    82                                      
    83                                      ; Rezultatul se află în ECX:EAX = FFFF FFFF FFFF FFFE
    84                                  
    85                                      ; Exit program
    86 00000083 6A00                        push dword 0
    87 00000085 FF15[00000000]              call [exit]
